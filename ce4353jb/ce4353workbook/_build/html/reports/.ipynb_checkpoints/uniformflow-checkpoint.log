Traceback (most recent call last):
  File "/opt/jupyterhub/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/jupyterhub/lib/python3.8/site-packages/nbclient/client.py", line 1087, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/jupyterhub/lib/python3.8/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/jupyterhub/lib/python3.8/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/usr/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/jupyterhub/lib/python3.8/site-packages/nbclient/client.py", line 540, in async_execute
    await self.async_execute_cell(
  File "/opt/jupyterhub/lib/python3.8/site-packages/nbclient/client.py", line 832, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/jupyterhub/lib/python3.8/site-packages/nbclient/client.py", line 740, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# simply reuse code

def Qman(Kn,n,A,R,S):
    Qman=(Kn/n)*(A)*(R**(2/3))*(S**(1/2))
    return(Qman)

def TopPara(y,h,b):
    TopPara=b*(y/h)**(1/2)
    return(TopPara)
    
def AreaPara(y,h,b):
    AreaPara=(2/3)*y*(b*(y/h)**(1/2))
    return(AreaPara)

def PerPara(y,h,b):
    import math
    x=4*y/b
    t1=1+x**2
    t2=t1**(1/2)
    t3=1/x
    PerPara=(b/2)*(t2 + t3*math.log(x+t2))
    return(PerPara)  

Qdesign = 80
Slope = 0.005
Mann = 0.040
Bmax = 30
Ymax = 1.782955#<< need to specify this value, not provided in the example

# Using Newton's Method

from scipy.optimize import newton

def f(y):
    global Qdesign,Slope,Mann,Ymax,Bmax #set as global variables so can access from outside the function.  DANGER WILLY!
    area = AreaPara(y,Ymax,Bmax)
    perimeter = PerPara(y,Ymax,Bmax)
    radius = area/perimeter
    Qout = Qman(1.49,Mann,area,radius,Slope)
    f = Qout-Qdesign
    return(f)

yguess =  Ymax
#print(newton(f, yguess))
ysolve = newton(f, yguess)
area = AreaPara(y,Ymax,Bmax)
perimeter = PerPara(y,Ymax,Bmax)
radius = area/perimeter
Qout = Qman(1.49,Mann,area,radius,Slope)
print("y_n is",round(ysolve,5)," feet \nComputed Discharge is ",round(Qout,3)," CFS")
print("Flow Balance Error is ",round(Qout - Qdesign,4))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-2-f2046cde79bd>[0m in [0;36m<module>[0;34m[0m
[1;32m     44[0m [0;31m#print(newton(f, yguess))[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     45[0m [0mysolve[0m [0;34m=[0m [0mnewton[0m[0;34m([0m[0mf[0m[0;34m,[0m [0myguess[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 46[0;31m [0marea[0m [0;34m=[0m [0mAreaPara[0m[0;34m([0m[0my[0m[0;34m,[0m[0mYmax[0m[0;34m,[0m[0mBmax[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     47[0m [0mperimeter[0m [0;34m=[0m [0mPerPara[0m[0;34m([0m[0my[0m[0;34m,[0m[0mYmax[0m[0;34m,[0m[0mBmax[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     48[0m [0mradius[0m [0;34m=[0m [0marea[0m[0;34m/[0m[0mperimeter[0m[0;34m[0m[0;34m[0m[0m

[0;31mNameError[0m: name 'y' is not defined
NameError: name 'y' is not defined

